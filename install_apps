#!/bin/bash
kubectl apply -f istio/samples/bookinfo/platform/kube/bookinfo.yaml 
kubectl apply -f istio/samples/bookinfo/networking/bookinfo-gateway.yaml
kubectl apply -f istio/samples/bookinfo/networking/destination-rule-all.yaml
kubectl apply -f istio/samples/bookinfo/networking/virtual-service-reviews-v2-v3.yaml
./istio/bin/istioctl analyze
kubectl get svc istio-ingressgateway -n istio-system
export INGRESS_HOST=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
export INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].port}')
export SECURE_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="https")].port}')
export GATEWAY_URL=$INGRESS_HOST:$INGRESS_PORT
curl -X GET http://$GATEWAY_URL/productpage



echo "Configuring services with istio."
kubectl create --context=$CTX_CLUSTER1 namespace tom
kubectl label --context=$CTX_CLUSTER1 namespace tom istio-injection=enabled
kubectl apply --context=$CTX_CLUSTER1 -n tom -f istio/samples/sleep/sleep.yaml
export SLEEP_POD=$(kubectl get --context=$CTX_CLUSTER1 -n tom pod -l app=sleep -o jsonpath={.items..metadata.name})

kubectl create --context=$CTX_CLUSTER2 namespace jerry
kubectl label --context=$CTX_CLUSTER2 namespace jerry istio-injection=enabled
kubectl apply --context=$CTX_CLUSTER2 -n jerry -f istio/samples/httpbin/httpbin.yaml
export CLUSTER2_GW_ADDR=$(kubectl get --context=$CTX_CLUSTER2 svc --selector=app=istio-ingressgateway \
    -n istio-system -o jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}')
kubectl apply --context=$CTX_CLUSTER1 -n tom -f - <<EOF
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: httpbin-jerry
spec:
  hosts:
  # must be of form name.namespace.global
  - httpbin.jerry.global
  # Treat remote cluster services as part of the service mesh
  # as all clusters in the service mesh share the same root of trust.
  location: MESH_INTERNAL
  ports:
  - name: http1
    number: 8000
    protocol: http
  resolution: DNS
  addresses:
  # the IP address to which httpbin.jerry.global will resolve to
  # must be unique for each remote service, within a given cluster.
  # This address need not be routable. Traffic for this IP will be captured
  # by the sidecar and routed appropriately.
  - 240.0.0.2
  endpoints:
  # This is the routable address of the ingress gateway in cluster2 that
  # sits in front of sleep.tom service. Traffic from the sidecar will be
  # routed to this address.
  - address: ${CLUSTER2_GW_ADDR}
    ports:
      http1: 15443 # Do not change this port value
EOF

echo "Verifying httpbin is accessible from sleep service."
kubectl exec --context=$CTX_CLUSTER1 $SLEEP_POD -n tom -c sleep -- curl -I httpbin.jerry.global:8000/headers

echo "Sending remote traffic via egress gateway."
kubectl apply --context=$CTX_CLUSTER1 -n tom -f - <<EOF
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: httpbin-jerry
spec:
  hosts:
  # must be of form name.namespace.global
  - httpbin.jerry.global
  location: MESH_INTERNAL
  ports:
  - name: http1
    number: 8000
    protocol: http
  resolution: DNS
  addresses:
  - 240.0.0.2
  endpoints:
  - address: ${CLUSTER2_GW_ADDR}
    network: external
    ports:
      http1: 15443 # Do not change this port value
  - address: istio-egressgateway.istio-system.svc.cluster.local
    ports:
      http1: 15443
EOF
