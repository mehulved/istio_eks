#!/bin/bash

if [ ! -d "istio" ]
then
    curl -L https://istio.io/downloadIstio | sh -
    ISTIO_VERSION=$(curl -L -s https://api.github.com/repos/istio/istio/releases | grep tag_name | sed "s/ *\"tag_name\": *\"\\(.*\\)\",*/\\1/" | grep -v -E "(alpha|beta|rc)\.[0-9]$" | sort -t"." -k 1,1 -k 2,2 -k 3,3 -k 4,4 | tail -n 1)
    mv istio-$ISTIO_VERSION istio
    rm istio-*.tar.gz
fi

ISTIO_BIN=./istio/bin/istioctl

export CTX_CLUSTER1=$(kubectl config view -o jsonpath='{.contexts[0].name}')
export CTX_CLUSTER2=$(kubectl config view -o jsonpath='{.contexts[1].name}')
echo "Creating namespace for istio-system."
kubectl --context=$CTX_CLUSTER1 create namespace istio-system
kubectl --context=$CTX_CLUSTER2 create namespace istio-system
echo "Create secrets to use CA certificate."
kubectl --context=$CTX_CLUSTER1 create secret generic cacerts -n istio-system \
    --from-file=istio/samples/certs/ca-cert.pem \
    --from-file=istio/samples/certs/ca-key.pem \
    --from-file=istio/samples/certs/root-cert.pem \
    --from-file=istio/samples/certs/cert-chain.pem
kubectl --context=$CTX_CLUSTER2 create secret generic cacerts -n istio-system \
    --from-file=istio/samples/certs/ca-cert.pem \
    --from-file=istio/samples/certs/ca-key.pem \
    --from-file=istio/samples/certs/root-cert.pem \
    --from-file=istio/samples/certs/cert-chain.pem

echo "Installing istio..."
$ISTIO_BIN --context=$CTX_CLUSTER1 install -f istio/manifests/examples/multicluster/values-istio-multicluster-gateways.yaml
$ISTIO_BIN --context=$CTX_CLUSTER2 install -f istio/manifests/examples/multicluster/values-istio-multicluster-gateways.yaml
echo "Istio has been installed."

echo "Setting up kubedns."
kubectl --context=$CTX_CLUSTER1 apply -f - <<EOF
apiVersion: v1
kind: ConfigMap
metadata:
  name: kube-dns
  namespace: kube-system
data:
  stubDomains: |
    {"global": ["$(kubectl get svc -n istio-system istiocoredns -o jsonpath={.spec.clusterIP})"]}
EOF

kubectl --context=$CTX_CLUSTER2 apply -f - <<EOF
apiVersion: v1
kind: ConfigMap
metadata:
  name: kube-dns
  namespace: kube-system
data:
  stubDomains: |
    {"global": ["$(kubectl get svc -n istio-system istiocoredns -o jsonpath={.spec.clusterIP})"]}
EOF
